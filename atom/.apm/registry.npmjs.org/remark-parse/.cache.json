{"_id":"remark-parse","_rev":"8-46ac25bc4efc3ce39facd57629c219e5","name":"remark-parse","description":"Markdown parser for remark","dist-tags":{"latest":"2.0.2"},"versions":{"0.0.0":{"name":"remark-parse","version":"0.0.0","description":"Markdown parser for remark","license":"MIT","keywords":["markdown","abstract","syntax","tree","ast","parse"],"homepage":"http://remark.js.org","repository":{"type":"git","url":"https://github.com/wooorm/remark/tree/master/packages/remark-parse"},"bugs":{"url":"https://github.com/wooorm/remark/issues"},"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"http://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"http://wooorm.com"},{"name":"Eugene Sharygin","email":"eush77@gmail.com"}],"engines":{"node":">=0.11.0"},"files":["index.js","lib"],"dependencies":{"collapse-white-space":"^1.0.0","extend":"^3.0.0","parse-entities":"^1.0.2","repeat-string":"^1.5.4","trim":"0.0.1","trim-trailing-lines":"^1.0.0","unherit":"^1.0.4","unist-util-remove-position":"^1.0.0","vfile-location":"^2.0.0"},"_id":"remark-parse@0.0.0","scripts":{},"_shasum":"fc50d1fe29da92f757fdefefd408b6ea9ad882ea","_from":".","_npmVersion":"3.8.6","_nodeVersion":"6.1.0","_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"dist":{"shasum":"fc50d1fe29da92f757fdefefd408b6ea9ad882ea","tarball":"https://registry.npmjs.org/remark-parse/-/remark-parse-0.0.0.tgz"},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/remark-parse-0.0.0.tgz_1465736076182_0.8585487247910351"},"directories":{}},"1.0.0":{"name":"remark-parse","version":"1.0.0","description":"Markdown parser for remark","license":"MIT","keywords":["markdown","abstract","syntax","tree","ast","parse"],"homepage":"http://remark.js.org","repository":{"type":"git","url":"https://github.com/wooorm/remark/tree/master/packages/remark-parse"},"bugs":{"url":"https://github.com/wooorm/remark/issues"},"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"http://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"http://wooorm.com"},{"name":"Eugene Sharygin","email":"eush77@gmail.com"}],"engines":{"node":">=0.11.0"},"files":["index.js","lib"],"dependencies":{"collapse-white-space":"^1.0.0","extend":"^3.0.0","parse-entities":"^1.0.2","repeat-string":"^1.5.4","trim":"0.0.1","trim-trailing-lines":"^1.0.0","unherit":"^1.0.4","unist-util-remove-position":"^1.0.0","vfile-location":"^2.0.0"},"_id":"remark-parse@1.0.0","scripts":{},"_shasum":"cd62b36b39008eadcbe23dfe8337b046e726d768","_from":".","_npmVersion":"3.8.6","_nodeVersion":"6.1.0","_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"dist":{"shasum":"cd62b36b39008eadcbe23dfe8337b046e726d768","tarball":"https://registry.npmjs.org/remark-parse/-/remark-parse-1.0.0.tgz"},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/remark-parse-1.0.0.tgz_1465767512345_0.6051385258324444"},"directories":{}},"1.1.0":{"name":"remark-parse","version":"1.1.0","description":"Markdown parser for remark","license":"MIT","keywords":["markdown","abstract","syntax","tree","ast","parse"],"homepage":"http://remark.js.org","repository":{"type":"git","url":"https://github.com/wooorm/remark/tree/master/packages/remark-parse"},"bugs":{"url":"https://github.com/wooorm/remark/issues"},"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"http://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"http://wooorm.com"},{"name":"Eugene Sharygin","email":"eush77@gmail.com"}],"engines":{"node":">=0.11.0"},"files":["index.js","lib"],"dependencies":{"collapse-white-space":"^1.0.0","extend":"^3.0.0","parse-entities":"^1.0.2","repeat-string":"^1.5.4","trim":"0.0.1","trim-trailing-lines":"^1.0.0","unherit":"^1.0.4","unist-util-remove-position":"^1.0.0","vfile-location":"^2.0.0"},"_id":"remark-parse@1.1.0","scripts":{},"_shasum":"c3ca10f9a8da04615c28f09aa4e304510526ec21","_from":".","_npmVersion":"3.7.3","_nodeVersion":"5.9.1","_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"dist":{"shasum":"c3ca10f9a8da04615c28f09aa4e304510526ec21","tarball":"https://registry.npmjs.org/remark-parse/-/remark-parse-1.1.0.tgz"},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/remark-parse-1.1.0.tgz_1470758336888_0.29067788645625114"},"directories":{}},"2.0.0":{"name":"remark-parse","version":"2.0.0","description":"Markdown parser for remark","license":"MIT","keywords":["markdown","abstract","syntax","tree","ast","parse"],"homepage":"http://remark.js.org","repository":{"type":"git","url":"https://github.com/wooorm/remark/tree/master/packages/remark-parse"},"bugs":{"url":"https://github.com/wooorm/remark/issues"},"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"http://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"http://wooorm.com"},{"name":"Eugene Sharygin","email":"eush77@gmail.com"}],"engines":{"node":">=0.11.0"},"files":["index.js","lib"],"dependencies":{"collapse-white-space":"^1.0.2","has":"^1.0.1","is-alphabetical":"^1.0.0","is-decimal":"^1.0.0","is-whitespace-character":"^1.0.0","is-word-character":"^1.0.0","markdown-escapes":"^1.0.0","parse-entities":"^1.0.2","repeat-string":"^1.5.4","state-toggle":"^1.0.0","trim":"0.0.1","trim-trailing-lines":"^1.0.0","unherit":"^1.0.4","unist-util-remove-position":"^1.0.0","vfile-location":"^2.0.0","xtend":"^4.0.1"},"_id":"remark-parse@2.0.0","scripts":{},"_shasum":"a09c1375999877aa68099a137b083c3b55b0dfc1","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.0","_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"dist":{"shasum":"a09c1375999877aa68099a137b083c3b55b0dfc1","tarball":"https://registry.npmjs.org/remark-parse/-/remark-parse-2.0.0.tgz"},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/remark-parse-2.0.0.tgz_1471804587198_0.4748798469081521"},"directories":{}},"2.0.1":{"name":"remark-parse","version":"2.0.1","description":"Markdown parser for remark","license":"MIT","keywords":["markdown","abstract","syntax","tree","ast","parse"],"homepage":"http://remark.js.org","repository":{"type":"git","url":"https://github.com/wooorm/remark/tree/master/packages/remark-parse"},"bugs":{"url":"https://github.com/wooorm/remark/issues"},"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"http://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"http://wooorm.com"},{"name":"Eugene Sharygin","email":"eush77@gmail.com"}],"engines":{"node":">=0.11.0"},"files":["index.js","lib"],"dependencies":{"collapse-white-space":"^1.0.2","has":"^1.0.1","is-alphabetical":"^1.0.0","is-decimal":"^1.0.0","is-whitespace-character":"^1.0.0","is-word-character":"^1.0.0","markdown-escapes":"^1.0.0","parse-entities":"^1.0.2","repeat-string":"^1.5.4","state-toggle":"^1.0.0","trim":"0.0.1","trim-trailing-lines":"^1.0.0","unherit":"^1.0.4","unist-util-remove-position":"^1.0.0","vfile-location":"^2.0.0","xtend":"^4.0.1"},"_id":"remark-parse@2.0.1","scripts":{},"_shasum":"6d436c47e53ce689038f1291fc2fbac9524acc9d","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.0","_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"dist":{"shasum":"6d436c47e53ce689038f1291fc2fbac9524acc9d","tarball":"https://registry.npmjs.org/remark-parse/-/remark-parse-2.0.1.tgz"},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/remark-parse-2.0.1.tgz_1471901294926_0.5475583807565272"},"directories":{}},"2.0.2":{"name":"remark-parse","version":"2.0.2","description":"Markdown parser for remark","license":"MIT","keywords":["markdown","abstract","syntax","tree","ast","parse"],"homepage":"http://remark.js.org","repository":{"type":"git","url":"https://github.com/wooorm/remark/tree/master/packages/remark-parse"},"bugs":{"url":"https://github.com/wooorm/remark/issues"},"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"http://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"http://wooorm.com"},{"name":"Eugene Sharygin","email":"eush77@gmail.com"}],"engines":{"node":">=0.11.0"},"files":["index.js","lib"],"dependencies":{"collapse-white-space":"^1.0.2","has":"^1.0.1","is-alphabetical":"^1.0.0","is-decimal":"^1.0.0","is-whitespace-character":"^1.0.0","is-word-character":"^1.0.0","markdown-escapes":"^1.0.0","parse-entities":"^1.0.2","repeat-string":"^1.5.4","state-toggle":"^1.0.0","trim":"0.0.1","trim-trailing-lines":"^1.0.0","unherit":"^1.0.4","unist-util-remove-position":"^1.0.0","vfile-location":"^2.0.0","xtend":"^4.0.1"},"_id":"remark-parse@2.0.2","scripts":{},"_shasum":"6abe266a166b14065901647ccc77f9b1826148e2","_from":".","_npmVersion":"3.10.7","_nodeVersion":"6.3.0","_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"dist":{"shasum":"6abe266a166b14065901647ccc77f9b1826148e2","tarball":"https://registry.npmjs.org/remark-parse/-/remark-parse-2.0.2.tgz"},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/remark-parse-2.0.2.tgz_1476529460958_0.4804279583040625"},"directories":{}}},"readme":"# remark-parse [![Build Status][build-badge]][build-status] [![Coverage Status][coverage-badge]][coverage-status] [![Chat][chat-badge]][chat]\n\n[Parser][] for [**unified**][unified].  Parses markdown to an\n[**mdast**][mdast] syntax tree.  Used in the [**remark**\nprocessor][processor].  Can be [extended][extend] to change how\nmarkdown is parsed.\n\n## Installation\n\n[npm][]:\n\n```bash\nnpm install remark-parse\n```\n\n## Usage\n\n```js\nvar unified = require('unified');\nvar markdown = require('remark-parse');\nvar html = require('remark-html');\n\nprocess.stdin\n  .pipe(unified())\n  .use(markdown)\n  .use(html)\n  .pipe(process.stdout, {commonmark: true});\n```\n\n## Table of Contents\n\n*   [API](#api)\n    *   [processor.use(parse)](#processoruseparse)\n    *   [parse.Parser](#parseparser)\n*   [Extending the Parser](#extending-the-parser)\n    *   [Parser#blockTokenizers](#parserblocktokenizers)\n    *   [Parser#blockMethods](#parserblockmethods)\n    *   [Parser#inlineTokenizers](#parserinlinetokenizers)\n    *   [Parser#inlineMethods](#parserinlinemethods)\n    *   [function tokenizer(eat, value, silent)](#function-tokenizereat-value-silent)\n    *   [tokenizer.locator(value, fromIndex)](#tokenizerlocatorvalue-fromindex)\n    *   [eat(subvalue)](#eatsubvalue)\n    *   [add(node\\[, parent\\])](#addnode-parent)\n    *   [add.test()](#addtest)\n    *   [add.reset(node\\[, parent\\])](#addresetnode-parent)\n*   [License](#license)\n\n## API\n\n### `processor.use(parse)`\n\nConfigure the `processor` to read markdown as input and process an\n[**mdast**][mdast] syntax tree.\n\n#### `options`\n\nOptions are passed later through [`processor.parse()`][parse],\n[`processor.process()`][process], or [`processor.pipe()`][pipe].\nThe following settings are supported:\n\n*   [`gfm`][options-gfm] (`boolean`, default: `true`);\n*   [`yaml`][options-yaml] (`boolean`, default: `true`);\n*   [`commonmark`][options-commonmark] (`boolean`, default: `false`);\n*   [`footnotes`][options-footnotes] (`boolean`, default: `false`);\n*   [`pedantic`][options-pedantic] (`boolean`, default: `false`);\n*   [`breaks`][options-breaks] (`boolean`, default: `false`).\n\n##### `options.gfm`\n\n```md\nhello ~~hi~~ world\n```\n\nGFM mode (default: `true`) turns on:\n\n*   [Fenced code blocks](https://help.github.com/articles/github-flavored-markdown/#fenced-code-blocks);\n*   [Autolinking of URLs](https://help.github.com/articles/github-flavored-markdown/#url-autolinking);\n*   [Deletions (strikethrough)](https://help.github.com/articles/github-flavored-markdown/#strikethrough);\n*   [Task lists](https://help.github.com/articles/writing-on-github/#task-lists);\n*   [Tables](https://help.github.com/articles/github-flavored-markdown/#tables).\n\n##### `options.yaml`\n\n```md\n---\ntitle: YAML is Cool\n---\n\n# YAML is Cool\n```\n\nYAML mode (default: `true`) enables raw YAML front matter to be detected\nat the top.\n\n##### `options.commonmark`\n\n```md\nThis is a paragraph\n    and this is also part of the preceding paragraph.\n```\n\nCommonMark mode (default: `false`) allows:\n\n*   Empty lines to split blockquotes;\n*   Parentheses (`(` and `)`) around for link and image titles;\n*   Any escaped [ASCII-punctuation][escapes] character;\n*   Closing parenthesis (`)`) as an ordered list marker;\n*   URL definitions (and footnotes, when enabled) in blockquotes.\n\nCommonMark mode disallows:\n\n*   Code directly following a paragraph;\n*   ATX-headings (`# Hash headings`) without spacing after opening hashes\n    or and before closing hashes;\n*   Setext headings (`Underline headings\\n---`) when following a paragraph;\n*   Newlines in link and image titles;\n*   White space in link and image URLs in auto-links (links in brackets,\n    `<` and `>`);\n*   Lazy blockquote continuation, lines not preceded by a closing angle\n    bracket (`>`), for lists, code, and thematicBreak.\n\n##### `options.footnotes`\n\n```md\nSomething something[^or something?].\n\nAnd something else[^1].\n\n[^1]: This reference footnote contains a paragraph...\n\n    * ...and a list\n```\n\nFootnotes mode (default: `false`) enables reference footnotes and inline\nfootnotes.  Both are wrapped in square brackets and preceded by a caret\n(`^`), and can be referenced from inside other footnotes.\n\n##### `options.breaks`\n\n```md\nThis is a\nparagraph.\n```\n\nBreaks mode (default: `false`) exposes newline characters inside\nparagraphs as breaks.\n\n##### `options.pedantic`\n\n```md\nCheck out some_file_name.txt\n```\n\nPedantic mode (default: `false`) turns on:\n\n*   Emphasis (`_alpha_`) and importance (`__bravo__`) with underscores\n    in words;\n*   Unordered lists with different markers (`*`, `-`, `+`);\n*   If `commonmark` is also turned on, ordered lists with different\n    markers (`.`, `)`);\n*   And pedantic mode removes less spaces in list-items (at most four,\n    instead of the whole indent).\n\n### `parse.Parser`\n\nAccess to the [parser][], if you need it.\n\n## Extending the Parser\n\nMost often, using transformers to manipulate a syntax tree produces\nthe desired output.  Sometimes, mainly when introducing new syntactic\nentities with a certain level of precedence, interfacing with the parser\nis necessary.\n\nIf this plug-in is used, it adds a [`Parser`][parser] constructor to\nthe `processor`.  Other plug-ins can add tokenizers to the parser’s\nprototype to change how markdown is parsed.\n\nThe below plug-in adds a [tokenizer][] for at-mentions.\n\n```js\nfunction mentions(processor) {\n    var Parser = processor.Parser;\n    var tokenizers = Parser.prototype.inlineTokenizers;\n    var methods = Parser.prototype.inlineMethods;\n\n    /* Add an inline tokenizer (defined in the following example). */\n    tokenizers.mention = tokenizeMention;\n\n    /* Run it just before `text`. */\n    methods.splice(methods.indexOf('text'), 0, 'mention');\n}\n\nmodule.exports = mentions;\n```\n\n### `Parser#blockTokenizers`\n\nAn object mapping tokenizer names to [tokenizer][]s.  These\ntokenizers (for example: `fencedCode`, `table`, and `paragraph`) eat\nfrom the start of a value to a line ending.\n\n### `Parser#blockMethods`\n\nArray of `blockTokenizers` names (`string`) specifying the order in\nwhich they run.\n\n### `Parser#inlineTokenizers`\n\nAn object mapping tokenizer names to [tokenizer][]s.  These tokenizers\n(for example: `url`, `reference`, and `emphasis`) eat from the start\nof a value.  To increase performance, they depend on [locator][]s.\n\n### `Parser#inlineMethods`\n\nArray of `inlineTokenizers` names (`string`) specifying the order in\nwhich they run.\n\n### `function tokenizer(eat, value, silent)`\n\n```js\nfunction tokenizeMention(eat, value, silent) {\n    var match = /^@(\\w+)/.exec(value);\n\n    if (match) {\n        if (silent) {\n            return true;\n        }\n\n        return eat(match[0])({\n            'type': 'link',\n            'url': 'https://social-network/' + match[1],\n            'children': [{\n                'type': 'text',\n                'value': match[0]\n            }]\n        });\n    }\n}\n\ntokenizeMention.notInLink = true;\ntokenizeMention.locator = locateMention;\n```\n\nThe parser knows two types of tokenizers: block level and inline level.\nBlock level tokenizers are the same as inline level tokenizers, with\nthe exception that the latter must have a [locator][].\n\nTokenizers _test_ whether a document starts with a certain syntactic\nentity.  In _silent_ mode, they return whether that test passes.\nIn _normal_ mode, they consume that token, a process which is called\n“eating”.  Locators enable tokenizers to function faster by providing\ninformation on where the next entity may occur.\n\n###### Signatures\n\n*   `Node? = tokenizer(eat, value)`;\n*   `boolean? = tokenizer(eat, value, silent)`.\n\n###### Parameters\n\n*   `eat` ([`Function`][eat]) — Eat, when applicable, an entity;\n*   `value` (`string`) — Value which may start an entity;\n*   `silent` (`boolean`, optional) — Whether to detect or consume.\n\n###### Properties\n\n*   `locator` ([`Function`][locator])\n    — Required for inline tokenizers;\n*   `onlyAtStart` (`boolean`)\n    — Whether nodes can only be found at the beginning of the document;\n*   `notInBlock` (`boolean`)\n    — Whether nodes cannot be in blockquotes, lists, or footnote\n    definitions;\n*   `notInLink` (`boolean`)\n    — Whether nodes cannot be in lists.\n*   `notInLink` (`boolean`)\n    — Whether nodes cannot be in links.\n\n###### Returns\n\n*   In _silent_ mode, whether a node can be found at the start of `value`;\n*   In _normal_ mode, a node if it can be found at the start of `value`.\n\n### `tokenizer.locator(value, fromIndex)`\n\n```js\nfunction locateMention(value, fromIndex) {\n    return value.indexOf('@', fromIndex);\n}\n```\n\nLocators are required for inline tokenization to keep the process\nperformant.  Locators enable inline tokenizers to function faster by\nproviding information on the where the next entity occurs.  Locators\nmay be wrong, it’s OK if there actually isn’t a node to be found at\nthe index they return, but they must skip any nodes.\n\n###### Parameters\n\n*   `value` (`string`) — Value which may contain an entity;\n*   `fromIndex` (`number`) — Position to start searching at.\n\n###### Returns\n\nIndex at which an entity may start, and `-1` otherwise.\n\n### `eat(subvalue)`\n\n```js\nvar add = eat('foo');\n```\n\nEat `subvalue`, which is a string at the start of the\n[tokenize][tokenizer]d `value` (it’s tracked to ensure the correct\nvalue is eaten).\n\n###### Parameters\n\n*   `subvalue` (`string`) - Value to eat.\n\n###### Returns\n\n[`add`][add].\n\n### `add(node[, parent])`\n\n```js\nvar add = eat('foo');\nadd({type: 'text', value: 'foo'});\n```\n\nAdd [positional information][location] to `node` and add it to `parent`.\n\n###### Parameters\n\n*   `node` ([`Node`][node]) - Node to patch position on and insert;\n*   `parent` ([`Node`][node], optional) - Place to add `node` to in\n    the syntax tree.  Defaults to the currently processed node.\n\n###### Returns\n\nThe given `node`.\n\n### `add.test()`\n\nGet the [positional information][location] which would be patched on\n`node` by `add`.\n\n###### Returns\n\n[`Location`][location].\n\n### `add.reset(node[, parent])`\n\n`add`, but resets the internal location.  Useful for example in\nlists, where the same content is first eaten for a list, and later\nfor list items\n\n###### Parameters\n\n*   `node` ([`Node`][node]) - Node to patch position on and insert;\n*   `parent` ([`Node`][node], optional) - Place to add `node` to in\n    the syntax tree.  Defaults to the currently processed node.\n\n###### Returns\n\nThe given `node`.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://img.shields.io/travis/wooorm/remark.svg\n\n[build-status]: https://travis-ci.org/wooorm/remark\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/remark.svg\n\n[coverage-status]: https://codecov.io/github/wooorm/remark\n\n[chat-badge]: https://img.shields.io/gitter/room/wooorm/remark.svg\n\n[chat]: https://gitter.im/wooorm/remark\n\n[license]: https://github.com/wooorm/remark/blob/master/LICENSE\n\n[author]: http://wooorm.com\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[unified]: https://github.com/wooorm/unified\n\n[parse]: https://github.com/wooorm/unified#processorparsefilevalue-options\n\n[process]: https://github.com/wooorm/unified#processorprocessfilevalue-options-done\n\n[pipe]: https://github.com/wooorm/unified#processorpipestream-options\n\n[processor]: https://github.com/wooorm/remark/blob/master/packages/remark\n\n[mdast]: https://github.com/wooorm/mdast\n\n[escapes]: http://spec.commonmark.org/0.25/#backslash-escapes\n\n[node]: https://github.com/wooorm/unist#node\n\n[location]: https://github.com/wooorm/unist#location\n\n[options-gfm]: #optionsgfm\n\n[options-yaml]: #optionsyaml\n\n[options-commonmark]: #optionscommonmark\n\n[options-footnotes]: #optionsfootnotes\n\n[options-pedantic]: #optionspedantic\n\n[options-breaks]: #optionsbreaks\n\n[parser]: https://github.com/wooorm/unified#processorparser\n\n[extend]: #extending-the-parser\n\n[tokenizer]: #function-tokenizereat-value-silent\n\n[locator]: #tokenizerlocatorvalue-fromindex\n\n[eat]: #eatsubvalue\n\n[add]: #addnode-parent\n","maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"time":{"modified":"2016-10-15T11:04:22.619Z","created":"2016-06-12T12:54:39.132Z","0.0.0":"2016-06-12T12:54:39.132Z","1.0.0":"2016-06-12T21:38:36.701Z","1.1.0":"2016-08-09T15:58:59.815Z","2.0.0":"2016-08-21T18:36:28.746Z","2.0.1":"2016-08-22T21:28:17.000Z","2.0.2":"2016-10-15T11:04:22.619Z"},"homepage":"http://remark.js.org","keywords":["markdown","abstract","syntax","tree","ast","parse"],"repository":{"type":"git","url":"https://github.com/wooorm/remark/tree/master/packages/remark-parse"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"http://wooorm.com"},{"name":"Eugene Sharygin","email":"eush77@gmail.com"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"http://wooorm.com"},"bugs":{"url":"https://github.com/wooorm/remark/issues"},"license":"MIT","readmeFilename":"readme.md","_attachments":{},"_etag":"\"1NF228D960CXF5NUOXIDLJ3ZY\""}