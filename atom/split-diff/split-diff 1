# Angular course

## Overview

From Johns Hopkins on coursera

Instructor - Yaakov Chaikin

5 weeks to get a better undestanding of AngularJS 1

### Links

*   [coursera](https://www.coursera.org/learn/single-page-web-apps-with-angularjs)
*   [github](https://github.com/jhu-ep-coursera/fullstack-course5)

### Assignments

Are graded by posting your github.io url.  

Need to make a new github account to do this.

mw-coursera mjwall+coursera@gmail.com 8

## Week 1

### Environment

github account
browser - chrome
editor
git
browser sync - a nodejs module

browser-sync start &#x2013;server &#x2013;directory &#x2013;files "**\*/**"

Using github pages for publishing

### Why AngularJS

Good code characteristics
-   ability to find code quickly
-   update some functionality without large rewrite
-   no duplication

code complexity - lack of these 2 things

high cohesion - when smaller pieces of functionality are strongly related to
each other within some code boundary. How well does that one thing stick to
doing just the one thing (level of abstraction for a function)

loose coupling - least possible dependency of one component on another
component - if you change one and you don not have to change the other

Model-View-ViewModel - approach to achieve high cohesion and loose coupling
-   Model - represents and holds raw data, can also contain logic to retrieve

data (js)
-   View - user interface - never changes that data, declares events but doesn't

handle them (html/css)
-   ViewModel - representation of state of the view, presentation logic, calls

other functions for business logic, never directly asks the view to display
anything (js)
-   Declarative Binder - binds the model of the ViewModel to the View

Angular also called Model-View-Whatever or MV\*
Can bind view and model with whatever

Angular is a design pattern designed to achieve high cohesion and loose
coupling

### AngularJS installation & basics

Download 1.5 latest

Using immediately-invoked function expression(IIFE) to avoid leaking variables
into the global scope

Lecture 04 from github

()();
(function () {})();

Also use "use strict;" in the javascript to avoid accidentally declaring
variables in the global scope by forgetting to use 'var'

In angular, the controller serves the function of the ViewModel.

### Lecture 05

ng-model - bind data between controller and view

$WHATEVER is an angular variable

### Lecture 06

ng-keyup - bind keyup event to function

### Lecture 07

Getting at the elements with pure javascript

Also, HTML 5 introduces data-\* attributes

### Lecture 08 - Dependency Injection, Interpolation

Pass in dependency - Design pattern is DI, implements IoC

### Lecture 09

$scope is the scope service, as it anything with a $

Angular parses the arguments of the function and uses the
$injector service's annotate function to figure out what has been
passed in

```js
function DIController ($scope,
                       $filter,
                       $injector) {
  $scope.name = "Yaakov";

  $scope.upper = function () {
    var upCase = $filter('uppercase');
    $scope.name = upCase($scope.name);
  };

  console.log($injector.annotate(DIController));
}
```

returns the array ```["$scope", "$filter", "$injector"]``` in the console

See Lecture 09 in the examples

Also shows how to filter in the function instead of the html

### Lecture 10

Minification

```js
  (function () {
  'use strict';

  angular.module('DIApp', [])
  .controller('DIController', DIController);

  function DIController ($scope, $filter) {
    $scope.name = "Yaakov";

    $scope.upper = function () {
      var upCase = $filter('uppercase');
      $scope.name = upCase($scope.name);
    };
  }

  })();
```

Can protect with inline array with function as last element

```js
.controller('DIController', ['$scope', '$filter', DIController]);
```

or more elegantly
```js
DIController.$inject = ['$scope', '$filter'];
```

### Lecture 11 - expression

Something that evaluates to a value

interpolation - eval string literal containing one more placeholders

tied to scope they are in

don't display typeerror or referencerror

interpolation is dual bound

use ng-src in image with blah<sub>{something}</sub> so html doesn't parse it before angular
has had a chance to get through it

## Week 2

### Filters

This is the filter service

var output = $filter('uppercase')(value);

Using the filter service, $filter('uppercase') returns a function

{{ "Hello" | uppercase }}

Some have custom arguments

1.  Custom filters

```js
function CustomFilterFactory() {
  return function (input) {
    return changedOutput
  };
}

.filter('custom', CustomFilterFactory)

Ctrl.$inject = [ '$scope', 'customFilter' ];
function Ctrl($scope, customFilter) {
  var msg = "Some input";
  customFilter(msg);
}
```

Note registered 'custom' but used 'customFilter'

Custom filters with arguments, just add args to filter factory and pass in arguments when you call it

Using a custom filter in html, use the registered name, in the above example

{{ "string" | custom }} not {{ "string" | customFilter }}

Can chain filters together

If only used in html, don't need to inject into controller

### Digest cycle

Event queue
ngclick etc
handle click / call $digest
Angular context($scope)
Watchers (prop<sub>1</sub>, prop<sub>2</sub>, etc)
Digest loop, loops over watchers once, then again until nothing has changed (dirty checking)

console.log($scope) has $$watchers and

Add watchers manually with $scope.watch() (not recommended in controller)

Better way to setup watchers is use interpolation with {{ }}

Another way is to use ng-model

Catch digest loop with something like

$scope.$watch(function () {
console.log("Digest loop fired")
})

Only applies to things done inside the Angular context, ie ng-click

$digest and $apply

Use apply to setup non angular event to run digest loop

timeout or onclick, but more typically a library like jquery or something

example

```js
function CounterController($scope) {
$scope.counter = 0;

$scope.upCounter = function() {
setTimeout(function () {
  $scope.counter++;
  console.log("counter incremented");
  $scope.digest // doesn't repaint wihtout this
}, 2000);
}
}
```

But there is a better way, because exceptions will not be visible to angular

```js
function CounterController($scope) {
$scope.counter = 0;

$scope.upCounter = function() {
setTimeout(function () {
  $scope.apply(function() {
    $scope.counter++;
    console.log("counter incremented");
  });
}, 2000);
}
}
```

Actually, there is a angular timeout service, so inject $timeout - Lecture 15

2-way, 1-way and one time binding

ng-model - 2 way binding

{{ var }} - 1 way binding

lots of these mean lots of watchers - can affect performance
no more than 2000 watchers per page - rule of thumb

1 time binding

{{ :: var }} - sets up and interpolates, then removes the watcher
good for something like a last name variable
don't initialize this value

### Looping, controller as syntax

ng-repeat

Can access $index variable in the body of an ng-repeat

ng-repeat also watches the entire collection

filtering arrays in javascript

Lecture 18 shows ng filter function to filter a list

### Prototypical inheritance (Lecture 19)

inheritance is when an object or class is based on another object or class,
using the same implemenetation and/or the same values

javascript is prototypal inheritance

child masks inherited or calls up the chain
TODO - figure out toolbar on organized

Functional constructors

### Scope inheritance

controller as syntax
Scope on nested controllers are Prototypical

ng-controller="Controller1 as ctrl1"

Then in JS, we can reference this.prop without injecting $Scope

helps avoid masking of nested controller properties

$scope is based on prototypal inheritance

ControllerName as label
label is a reference to 'this'
don't have to deal with prototypal inheritance, which makes
it simplier

### Services

1.  Custom Services

Controllers -
-   setup initial state of $scope
-   add behavior to $scope

NOT to
-   among other things
-   handle business logic directly
-   shard code or state across controllers

Use a service for that

use .service method on angular.module

.service('CustomService', CustomService)
first arg is name to inject into other services, controllers, etc
second arg is treated as a function constructors

Service is guaranteed to be a singleton when using .service method

Can share data that where

Services are also lazily instantiated, only if an application
component declares it as a dependency

2.  custom services with factory

factory is a central place that produces new objects
factory is sometimes called a factory service

.factory() is NOT just another way of creating the same service you can create with .service() but it CAN BE

.service() is also a factory, but a much more limited on compared to .factory().  It's a factory that always produces the same type of service - a singleton, without an easy way to configure its behavior

.factory('CustomService', CustomService)
first arg is name to inject into other services, controllers etc
second arg is a function that expected to produce a service, not a function constructor

Couple of ways to make a factory

return a function, ala

```js
function CustomService() {
  var factory = function() {
    return new SomeService();
  }
  return factory;
}
```

return an object literal
```js
function CustomService() {
  var factory = {
    getSomeService: function () {
      return new SomeService();
    }
  }
  return factory;
}
```

either way, we are in control of calling new

usage is different

3.  Custom services with .provider()

provider function uses provider.$get = function (this is factory function)

can provide a config option, usually defaults

```js
function ServiceProvider() {
  var provider = this;
  provider.config = {&#x2026;};

  provider.$get = function() {
    var service = new Service(provider.config.prop);
    return service;
  }
}
```

register with ```module().provider('Service', ServiceProvider)```

inject as usual

optional step 4a

```module().config(Config)```
guaranteed to run before any services, factories or controllers are created

optional setp 4b - inject provider into Config

```js
.provider('Service', ServiceProvider);
Config.$inject = ['ServiceProvider'];

function Config(ServiceProvider) {
  ServiceProvider.config.prop = 'value';
}
```
### Lecture 22

.provider - most verbose, but most flexible
.provider('name', function)
-   whatever the 'name' is - that's what get injected into other components

.config() functions gets called before any service, factory or controller is instantiated
-   therefore, we can't inject any regular components into .config
-   we CAN inject the provider of server with nameProvider

4.  ng-if, ng-show, ng-hide

ng-if removes element from DOM

ng-show and ng-hide leave in DOM but with ng-hide ng-show class respectively if attribute evals to true

## Week 3

### Lecture 24 - Asyncronous behavior with Promises and $q

Used to have callbacks, pass function to be executed

Problems if original is several layers always

Also hard to chain them together, hard to read and handle failure

AngularJS has promises, similar to ES6

```js
// declare
function asyncFunction() {
  // creates async environment with all the hooks into it,
  // including the promise object
  var deferred = $q.defer();

  // marks successful completion, wrap data for the promise
  if (..) { deferred.resolve(result); }

  // marks unsuccessful completion, wraps data for the promise
  else { deferred.reject(error); }

  // Returns promise to caller (a hook back to this entire process)
  return deferred.promise;
}

// use
var promise = asyncFunction();

promise.then(function (result) {
  // do something with result
}, function (error) {
  // do something with error
})

.catch(function (error){})
;
```

Can chain thens and finally add a check, but can also use $q.all to run them
in parallel as shown in Lecture 24 and it is cleaner

#### Summary

*   Promises give us a lot of flexibility when dealing with asyncronous behavior
*   The $q service is the Angular implementation of Promise applies
*   Promises either get resolved or rejected
*   The 'then' method takes 2 arguments (both function values)
    *   1st - function to handle success or 'resolve' outcome
    *   2nd - function to handle error or 'reject' outcome
    *   'then' itself returns a Promise, so it is chainable
*   $q.all method allows us to execute multimple promises in parallel, handling success/failure in one central place

### Lecture 25 - Ajax with $http service

```js
$http({
  method: "GET",
  url: "http://someurl",
  params: { param1: "value1"}
  ...
}).then(
  function success(response) {
    // do something with response.data
  },
  function error(response) {

  });
```

Note: params in $http service provide automatic urlencoding

Code for backend is at [github](https://github.com/jhu-ep-coursera/restaurant-menu-server)

Angular modules has a .constant function that takes name, value.

```js
.constant("ApiBasePath", "http://some.location.blah");
```

#### Summary
*   $http service is based on the promise api exposed to angular by the $q
*   $http is its a function
    *   Takes a single config object parameter (url only required prop)
    *   Returns a promise to be resolved with .then function
*   response.data property holds the server data response
    *   If JSON, automatically gets transformed into a JS object
*   module.constants can be used as an injectable constant

### Lecture 26 - Directives: Dynamic HTML

From [AngularJS Homepage](https://angularjs.org)

> Why AngularJS?
>
> HTML is great for declaring static documents, but it falters when we try to use it for declaring dynamic views in web-applications. AngularJS lets you extend HTML vocabulary for your application. The resulting environment is extraordinarily expressive, readable, and quick to develop.

Directive is a marker on the DOM elelement that tells angular's HTML compiler to attache a specific behavior to that DOM element

Steps to create
1.  Register Directive
```js
angular.module('app' [])
.controller('MyCtrl', MyCtrl)
.directive('myTag', MyTag)
```
First argument is normalized name that will appear in HTML, second argument is factory function that returns Directive Definition Object (DDO)
2.  Define Factory function
```js
MyTag.$inject = [...]
function MyTag(...) {
  var ddo = {
    template: "Hello World!"
    ...
  };

  return ddo;
}
```
3.  Use the tag in the HTML
```HTML
<my-tag></my-tag>
```

Unless you define otherwise, scope of directive is same as scope of enclosing controller

Even make semantic tags

#### Summary
*   Directive is a marker in HTML that Angular compiles into some behavior
    *   It can also change the HTML elements themselves
*   Register name of directives using (normalized) camelCase
*   Registered factory function must return a ddo
    *   The factory function gets invoked only once
*   With custom directives, our HTML coding becomes
    *   Reusable
    *   Semantically releveant to the actual web app we're building

### Lecture 27 - restrict property

DDO property restricting directive to Element or Attribute
Default is 'EA'
Best practice
*   restrict to attribute if directive is extending behavior, e.g. ng-repeat
*   restrict to element if directive is defining a component with an associated template, e.g. <list-item>

#### Summary
*   The DDO's restrict property determines what AngularJS compiler should look for to detect your custom directive
*   Using directive as a different restrict type than defined will cause the compiler to simply ignore it
*   Best Practice: Use 'E' for element when directive has content along with possible behavior
*   Best Practice: Use 'A' for attribute when directive has no content and only extends the behavior of host element
*   Class and comment directives are possible, but not used

### Lecture 28 - Directives Isolate Scope: "=" and "@"

Too much coupling by default when directive has same scope of the parent controllers

```js
function MyDirective() {
  var ddo = {
    scope: {
      myProp: '=attributeName'
    }
    ...
  }
  return ddo;
}
```

The ```=``` above is bidirectional

If you leave off the ```attributeName```, then attribute name is same as property name with the same normalization rules

If you end with a ?, the attribute is optional

The ```@attributeName``` is one way binding.  Changes in directive don't affect the dom

#### Summary
*   Having isolate scope on the directive
    *   Breaks the prototypal inheritance of the scope from the parent
    *   Makes the directive more independent, less coupled w/ controllers
*   We pass values into the directives using scope bindings
*   Bidirectional binding ("=") is such that directive scope property change affects the bound property and visa versa
*   DOM attribute value binding ("@") alwasy results in directive property being a string
    *   Changes to DOM attribute values are propogated to the directive property, but not the other way around


### Lecture 29 - Using controllers inside directives

Add behavior to controllers

```js
function MyDirective() {
  var ddo = {
    scope: {
      prop: '='
    },
    controller: ControllerFunction,
    bindToController: true,
    controllerAs: 'myCtrl',
    templateUrl: 'template.html'
  };
  return ddo;
}

ControllerFunction.$inject = ['Service'];
function ControllerFunction(Service) {
  var myCtrl = this;

  myCtrl.method = function () {
    var name = "Hello " + myCtrl.prop;
  }
}
```

Setup oneway binding when you don't expect the value to change to avoid setting up unused watchers

#### Summary
*   To add functionality to the directive, one choice is to use a controller that's declared directly on the DDO
*   Use controller property to declare controller in DDO
*   Use bindToController and controllerAs props to bind declared properties in isolate scope directly to controller instance
*   Define controller function as usuall
*   Whenever possible, use '<' for one-way binding to save resources instead of bidirectional binding with '='

Best practice to have directive change the data in the isolate scope, not the directives controller

TODO: figure out difference between '<' and '@' bindings in scope
### Lecture 30 - Directive APIs and "&"
*   Step 1: Define method in controller
```js
function Controller() {
  this.method = function (arg1) {
    this.prop = "Hi " + arg1;
  }
}
```
*   Step 2: Declare method reference in directive
```js
function MyDirective() {
  var ddo = {
    scope: {
      myMethod: '&method'
    },
    ...
    templateUrl: 'template.html'
  };
  return ddo;
}
```
*   Step 3: Declare in parent's template
```html
<div ng-controller="Controller as ctrl">
  <my-directive
      method="ctrl.method(myArg)">
    </my-directive>
</div>
```
myArg is not actually a value, but a reference we will use later because of the '&method' in the directive.
*   Step 4: Map method & args in Directive's template
```html
<button ng-click="dirCtrl.myMethod({myArg:'v1'});">
  Remove Item
</button>
```

#### Summary
*   '&' binding allows us to execute an expression (such as a function value) in the context of the parent scope
*   Parent template must declare an attribute providing:
    *   Method reference to call on the parent
    *   Argument keys for directive to bind values to
*   Directive
    *   Calls the referenced method
    *   Provides a map of argument key to value pairs
    *   Allows directive to pass data back to parent from isolate scope

### Lecture 31 - Manipulating the DOM with link

MVVM - we dont' want to manipulate the DOM directly.

*   Step 1: Declare link function
```js
function MyDirective() {
  var ddo = {
    scope: {...},
    link: LinkFunction,
    ...
    templateUrl: 'template.html'
  };
  return ddo;
}
```
*   Step 2: Define link function
```js
function LinkFunction(scope, element, attrs, controller) {...}
```
scope not $scope, not passing in angular scope object
element is the top level element
attrs that contains reference to attrs in element
controller - optional controller defined in this element

#### Summary
*   DOM manipulation is usally done inside of the link function
    *   Declared on the DDO
*   Link function does not support Injection
    *   To use injected components, services, inject them into Directive
*   'scope' parameter is the exact $scope in the directive's controller
*   'element' object represents the element of the directive
    *   Top level element
    *   It's jqLite object or jQuery object (if jQuery is included)

### Lecture 32 - Using Directive's transclude to Wrap Other elements

Using transclude on the DDO allows you pass other than string or interpolated string, you can wrap arbitrary content with it's own functions that is wrapped in the parents scope
*   Step 1: Set transclude to true
```js
function MyDirective() {
  var ddo = {
    scope: {...},
    ...
    transclude: true,ß
    templateUrl: 'template.html'
  };
  return ddo;
}
```
*   Step 2: Wrap some parent content
```html
<my-directive>
  <span>
    WARNING! WARNING! {{ctrl.someProp}}
  </span>
</my-directive>
```
Note evaluated in parent controller, NOT in our directive
*   Step 3: ng-transclude to place wrapped content
```html
<div>
  ...
  <div ng-transclude></div>
</div>
```

#### Summary
*   transclude allows whole templates to be passed into a directive
*   The wrapped content is evaluated in the parent's context, NOT in the directive's context
*   In the DDO:
    *   transclude: true
*   In directive's template:
    *   ng-tranclude attribute designates place for evaluated wrapped content

## Week 4

### Lecture 33 - Component & Component-Based Architectures

Components recently added to angular 1, prepare for upgrade to angular 2

Component, specific kind of directive

Principles of components
*   only control their own view and data, only isolate scope
*   have well-defined public API - Inputs and outputs
    *   only 1 way binding '<' and '@'
    *   never change property of passed in object or array
*   have well defined lifecycle
    *   onInit, onChanges, postLink, onDestroy, etc
*   application is tree of components

Steps
1. Register components with Modules, simple object not a function
2. Configure Component -
```js
angular.module('App', [])
.component('myComponent', {
  templateUrl: 'template.html',
  controller: CompController,
  bindings: {
    prop1: '<',
    prop2: '@',
    onAction: '&'
  }
})
```
3.  Reference props in template
```html
<div ng-click="$crtl.onAction({myArg: 'val'})">
  {{ $ctrl.prop1.prop }} and {{ $ctrl.prop2 }}
</div>
```
4.  Use component in html
```html
<my-component prop1="val-1" prop2="@parentProp" on-action="parentFunction(myArg)">
  {{ $ctrl.prop1.prop }} and {{ $ctrl.prop2 }}
</my-component>
```

@ binding is a dom element mapping

converted a directive from the shopping list lecture to a component.  Much simplier and had it's own controller with additional lifecycle methods

```js
$ctrl.$onInit() = function() {
  console.log("We are in $onInit()");
}

$ctrl.$onChanges = function(changeObj) {
  console.log("Changes: ", changeObj);
  // object references are not changed, so items didn't get updated
}

$ctrl.postLink = function() {
  // can manipulate DOM from here, had to inject $scope and $element into controller with a $watch
}
```

$ctrl.doCheck is in 1.5.8
```js
$ctrl.doCheck = function() {
  // totalItems added as local variable
  if ($ctrl.items.length !== totalItems) {
    totalItems = $ctrl.items.length;
    if ($ctrl.cookiesInList()) {
      var warningElem = $element.find('div.error');
      warningElem.slideDown(900);
    } else {
      var warningElem = $element.find('div.error');
      warningElem.slideUp(900);
    }

  }
}
```
Allows us to remove the $scope injection as well and still do something every digest loop.

#### Summary
*   Components encourge component-based Architectures
    *   but they don't enforce it 100%, so we must follow convetions
*   Components should never modify data of DOM that doesn't belong to them
    *   That is why it always has isolate sceop and well-defined APIs
*   Register components with .component('name', configObj)
*   Provide controller only if you are adding extra functionality
    *   Otherwise, Angular already provides an empty function for us


### Lecture 34 - AngularJS Event System

Components and directives etc communicate with each other.  Can also use services

Use publish-subscribe design pattern
*   Publishers:
    *   Mark messages with a classification
    *   Don't know subscribers or if there are any
*   Subscribers
    *   Sign up to listen for messages with a particular classification
    *   Don't know publishers or if there are any
*   In Angular, the common channel is scope
    *   Messages are events that can hold data

2 types of publish events
*   $scope.emit - which goes all the way back up the scope to the top level scope
*   $scope.broadcast - goes down the scope chain to all the leaves

Use $scope.on('nameOfEvent', handlerFunction)

ng-app is the parent controller, can broadcast to every element

Best practice to name the even with a namespace:eventName

Steps:
1.   Emit or broadcast
```js
$scope.$broadcast(
  'namespace:eventName',
  {prop: value});
```
2.  Handle the eventName
```js
$scope.$on('namespace:eventName', handler);
function handler(event, data) {
  if (data.prop === 'val1') {
    ...
  }
};
```

#### Summary
*   Publish-subscribe design pattern is implemented using the Angular Events system
*   You can publish events from anywhere in the system and listen for those event anywhere in the system
*   $scope.$emit sends the event up the scope chain
*   $scope.broadcast send the event down the scope chain
*   To broadcast to all nodes, use $rootScope.$broadcast
*   To listen for event, use either $scope.$on or $rootScope.$on
*   Deregister listener when using $rootScope.$on

### Lecture 35 - Modules

Modules allow us to split up our application.

Steps
1.  Create/Declare Modules
```js
//second argument means you are creating one instead of just retrieving and existing one
angular.module('module1', []);  
```
2.  Declare module artifacts
```js
angular.module('module1');  // no second argument, just retrieving and existing one
.controller('MyController', MyController)
```
3.  Wire in ng-app="MainModule"

Split into separate javascript into components, always load the javacript that creates the module before using it

Don't have to worry about order of modules, they are all loaded into the browser

Configuration blocks
```js
angular.module('module1')
.config(function() {
  // only inject providers and constants here
  // not services, because the config should run first
})
```

Run block

runs after config block

```js
angular.module('module1')
.run(function() {
  //only inject instances (like services) and constants, not providers
})

#### Summary
*   angular.module method takes 2 args to create a module
    *   Name of module
    *   Array of string module name dependencies
*  angular.module method with just name of module retrieves the previously created module
    *   Then, you can declare components, controllers, etc on it
*   module.config method first before module.run method
*   All dependency modules get configure first
*   It does not matter which modules are list first as long as module declarations are listed before artifact declarations on the module

### Lecture 36 - Routing

### Lecture 37 - Routing State with Controller

### Lecture 38 - Routing State with resolve

### Lecture 39 - Routing State with URL Parameters

### Lecture 40 - Routing State with Nested views

### Lecture 41 - Router State Transition Events
