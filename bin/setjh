#! /bin/bash
#
# A script for easily swapping your Java version.
#
# This is useful if you are working on different projects that use
# different version of Java.  Currently only works on Mac OSX, because it
# uses /usr/libexec/java_home to find the Java paths, but that could easily
# be changed
#
# This script expects that ${HOME}/.java_home/bin is on your $PATH before
# any other version of java.  Typically, something like this in your ~/.bashrc
#
# export JAVA_HOME=${HOME}/.java_home
# export PATH=${JAVA_HOME}bin:$PATH
#
# ~/.java_home is a symlink to an installed version of java.  The code below
# does some checks to make sure things are correct, provides some guidance
# if they are not, and changes the ~/.java_home symlink when they are.
#
# The script also writes out a ${HOME}/.java_version file which can be used
# in your PS1 to show what version you are current using.  Something like
#
# export PS1='\u@\h [java$(cat ~/.java_version)] \w $ '
#
# If you need Java 6 on the Mac, try http://support.apple.com/kb/dl1572

HOMEFILE=${HOME}/.java_home
VERFILE=${HOME}/.java_version
UNAME=$(uname)
ARCH=$(uname -p)

currently_installed_mac() {
    /usr/libexec/java_home -V 2>&1 | grep \"Java | awk '{print $1}' | cut -c 1-3 | set 's/\.$//' | uniq
}

currently_installed_linux() {
  find /usr/lib/jvm -maxdepth 1 -type l -regextype egrep -regex '.*java-.*-openjdk$' -printf '%f\n' | grep -v '^$'

  # /usr/lib/jvm/openjdk-11 only has src.zip, so remove it
  #find /usr/lib/jvm/ -maxdepth 1 -type d | grep -v /usr/lib/jvm/$ | grep -v /usr/lib/jvm/openjdk-1[123]$ | sed 's/\/usr\/lib\/jvm\///;s/-amd64$//' | sort
}

currently_installed() {
  if [ "${UNAME}" == "Linux" ]; then
    currently_installed_linux
  elif [ "${UNAME}" == "Darwin" ]; then
    currently_installed_mac
  else
    echo "Unknown OS ${UNAME}"
  fi
}

dir_for_version() {
  local ver=$1
  if [ "${ver}x" == "x" ]; then
    echo dir_for_version called without arg
    exit 1
  fi
  if [ "${UNAME}" == "Linux" ]; then
    #local dir=/usr/lib/jvm/${ver}-${ARCH}
    local dir=/usr/lib/jvm/${ver}
    if [ ! -e ${dir} ]; then
      echo $dir does not exist
      exit 1
    fi
    echo $dir
  elif [ "${UNAME}" == "Darwin" ]; then
    echo $(/usr/libexec/java_home -v ${ver})
  else
    echo "Unknown OS ${UNAME}"
  fi
}

usage() {
    echo Usage: 'setjh <version>', where version is one of:
    currently_installed
}

# check arg passed in
if [ "$1" == "" ]; then
    echo ERROR: arg was not provied
    usage
    exit 127
fi

# check requested version is installed
for v in $(currently_installed); do
    if [ "$1" == "${v}" ]; then
        NEWVER=$1
    fi 
done
if [ "${NEWVER}x" == "x" ]; then
    echo ERROR: request version $1 not installed:
    usage
    exit 128
else
    echo Trying to set JAVA_HOME to $NEWVER
fi

# check ~/.java_home is setup
if [ ! -e "${HOMEFILE}" ]; then
    echo ERROR: $HOMEFILE did not exist, try
    JH=$(dir_for_version $NEWVER)
    echo "ln -s $JH $HOMEFILE"
    exit 129
fi

# check ~/.java_version is setup
if [ ! -e "${VERFILE}" ]; then
    echo ERROR: $VERFILE did not exist, try
    echo "echo $NEWVER > ${HOME}/.java_version"
    exit 130
fi

munge_version() {
  java=$1
  if [ "${java}x" == "x" ]; then
    echo No java executable passed into munge_version
    exit 1
  fi
  $java -version 2>&1 | head -1 | awk '{print $1 "-" $3}' | sed 's/\"//g;s/java/oracle/;s/_.*//'
}

# current version of java in $PATH
CURJAVA=$(which java)
CURPATHVER=$(munge_version $CURJAVA)
# current version of java in ~/.java_home
CURHOMEVER=$(munge_version ${HOMEFILE}/bin/java)
# current version in ~/.java_version
CURVERFILE=$(cat "${VERFILE}")

# check ~/.java_home and ~/.java_version match
if [ "${CURHOMEVER}" != "${CURVERFILE}" ]; then
   echo ERROR: ~/.java_home and ~/.java_version do not match
   echo        Probably easiest to run:
   echo        "echo ${CURHOMEVER} > ${VERFILE}"
   exit 131
fi

# check java on PATH matches ~/.java_version
if [ "${CURPATHVER}" != "${CURVERFILE}" ]; then
    echo ERROR: version mismatch.
    echo        ~/.java_version says ${CURVERFILE} but running java -version says ${CURPATHVER}
    echo        You must fix this manually, maybe by putting ${HOMEFILE}/bin on your PATH env
    exit 132
fi

# check if trying to set current version
NEWDIR=$(dir_for_version $NEWVER)
NEWVER_NUM=$(munge_version ${NEWDIR}/bin/java)
if [ "${CURVERFILE}" == "${NEWVER_NUM}" ]; then
    echo WARN: Version ${NEWVER} already set, nothing to do
else
    rm $HOMEFILE && ln -s ${NEWDIR} $HOMEFILE && echo $NEWVER_NUM > $VERFILE
    echo Set JDK version: $(java -version 2>&1 | head -1)
fi
